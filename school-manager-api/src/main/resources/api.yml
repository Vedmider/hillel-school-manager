openapi: 3.0.3
info:
  title: School manager
  description: |
    The specification contains API contracts for school manager operations exposed by the inventory module
  contact:
    name: Andrii Lisovets
  license:
    name: Lisovets study open projects GNU licence
  version: 0.0.1
servers:
  - url: https://{region}.com/{apiVersion}
    variables:
      region:
        default: westus
        enum:
          - westus
          - eastus2
          - westcentralus
          - westeurope
          - southeastasia
      apiVersion:
        default: api/v1
tags:
  - name: SchoolManager
    description: Api to manage school functions

paths:
  /schools/{id}:
    get:
      tags:
        - SchoolManager
      summary: it is short representation
      description: |
        Long way
        description
        for this section
      operationId: getSchools
      parameters:
        - name: id
          in: path
          description: id of school
          required: true
          schema:
            type: string
        - name: verbosity
          in: query
          description: param need to filter fields for internal/external calls
          required: false
          schema:
            type: string
            default: all
            enum:
              - all
      responses:
        '200':
          description: Successfully returns School instance.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/School'
        '404':
          $ref: '#/components/responses/404Response'

  /school/{schoolId}:
    put:
      tags:
        - SchoolManager
      operationId: putSchoolId
      parameters:
        - name: schoolId
          in: path
          description: id of school
          required: true
          schema:
            type: string
        - in: header
          name: Accept-Language
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/School'
            examples:
              SchoolBodyExample:
                summary: example of school
                value:
                  id: 10
                  name: primarySchool
                  address: 'Kyiv, Paradise avenue 30'
                  site: www.google.com
      callbacks: # Callback definition
        myEvent: # Event name
          '{$request.body#/site}': # The callback URL,
            # Refers to the passed URL
            post:
              requestBody: # Contents of the callback message
                required: true
                content:
                  application/json:
                    schema:
                      type: object
                      properties:
                        message:
                          type: string
                          example: Some event happened
                      required:
                        - message
              responses:
                '200':
                  description: other description
                  content:
                    application/json:
                      schema:
                        description: some description
                        type: string
      responses:
        '200':
          $ref: '#/components/responses/200SchoolResponse'
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/School'

          # -----------------------------------------------------
          # Links
          # -----------------------------------------------------
          links:
            GetUserByUserId: # <---- arbitrary name for the link
              operationId: getSchools
              # or
              # operationRef: '#/paths/~1schools~1{id}/get'
              parameters:
                userId: '$response.body#/id'
              description: >
                The `id` value returned in the response can be used as
                the `id` parameter in `GET /schools/{id}`.
components:
  schemas:
    ProblemDetails:
      type: object
      properties:
        detail:
          type: string
          description: A human-readable explanation specific to this occurrence of the problem
        instance:
          type: string
          description: |
            A URI reference that identifies the specific occurrence of the problem.
            It can yield further information if de-referenced.
        status:
          type: integer
          format: int32
          description: |
            The HTTP status code for this occurrence of the problem.
            The HTTP status code generated by the origin server for this occurrence of the problem.
        title:
          type: string
          description: |
            A short, human-readable summary of the problem type.
            It should not change from occurrence to occurrence of the problem, except for purposes of localization.
            If a type other than about:blank is given, this attribute is also provided.
        type:
          type: string
          description: |
            Human-readable description for the problem (for example, using HTML) when de-referenced.
            When this member is not present, its value is assumed to be about:blank.
      required:
        - detail
        - status
    School:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
          maxLength: 255
          pattern: '^(?!CON$|PRN$|AUX$|NUL$|COM[1-9]$|LPT[1-9]$)(?![.])[^\x00-\x1F<>:"/\\|?*]{1,255}(?<![. ])$'
        address:
          type: string
        site:
          type: string

  responses:
    200SchoolResponse:
      description: Successfully returns School instance.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/School'
    404Response:
      description: |
        Not Found. <br>
        If the request contains no access token even though one isIf the API producer did not find a current <br>
        representation for the resource addressed by the URI passed in the request, or is not willing <br>
        to disclose that one exists, it responds with this response code. <br>
        The ProblemDetails structure is provided, including in the detail attribute information about <br>
        the source of the problem, for example, a wrong resource URI variable.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'

  examples:
    SchoolResponseExample:
        value:
          id: 10
          name: school wonderful name
          address: school best address
          site: www.google.com
        summary: A sample object

